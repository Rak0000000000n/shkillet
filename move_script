using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class move_script : MonoBehaviour
{
    [Header("Настройки камеры")]
    public Transform cam;

    [Space(12)]
    [Header("Скорости движения")]
    public float walkSpeed;
    public float runSpeed;
    public float sitSpeed;
    public float sitNrunSpeed;

    [Space(12)]
    [Header("Скорости вращения")]
    public float walkRotationSpeed;
    public float runRotationSpeed;
    public float sitRotationSpeed;
    public float sitNrunRotationSpeed;

    [Space(12)]
    [Header("Сидение")]
    public bool isSiting; // Флаг, указывающий, сидит ли персонаж

    [Space(12)]
    [Header("Анимация")]
    private Animator anim;

    [Space(12)]
    [Header("Изменение высоты")]
    private CapsuleCollider capsuleCollider;
    private float currentHeight;
    private float targetHeight;
    private float smoothTime = 0.55f; // Время плавного перехода (в секундах)
    private float velocity = 0f; // Переменная для скорости изменения высоты
    private Vector3 colliderOffset; // Смещение коллайдера

    [Space(12)]
    [Header("Дополнительные настройки")]
    private float speedChangeRate = 8f; // Скорость изменения скорости (чем больше значение, тем быстрее изменяется скорость)

    [Space(12)]
    [Header("Словарь высот")]
    // Справочный словарь для хранения высоты персонажа в каждой анимации
    private Dictionary<string, float> animationHeights = new Dictionary<string, float>()
    {
        // Заполните этот словарь высотами для каждой анимации
        {"not Sit", 1.85f},
        {"Sit", 1.48f},
    };

    // Переменные для движения
    private Vector3 movement;
    private bool isRunning;
    private float currentSpeed; // Текущая скорость движения
    private float currentRotationSpeed; // Текущая скорость вращения

    private void Start()
    {
        anim = GetComponent<Animator>(); // Получаем ссылку на компонент аниматора
        capsuleCollider = GetComponent<CapsuleCollider>();
        currentHeight = capsuleCollider.height; // Инициализируем текущую высоту
        currentSpeed = walkSpeed; // Инициализируем начальную скорость как скорость ходьбы
        currentRotationSpeed = walkRotationSpeed; // Инициализируем начальную скорость вращения как скорость ходьбы
    }

    void Update()
    {
        HandleInput();
        UpdateMovement();
        UpdateRotation();
        UpdateAnimation();
        UpdateColliderHeight();
    }

    // Обработка ввода
    private void HandleInput()
    {
        // Получаем направление движения от камеры.
        Vector3 forward = cam.forward;
        Vector3 right = cam.right;

        // Очищаем вертикальную составляющую направления, 
        // чтобы персонаж не двигался вверх или вниз.
        forward.y = 0;
        right.y = 0;

        // Нормализуем векторы направления, чтобы они имели длину 1.
        forward.Normalize();
        right.Normalize();

        // Вычисляем вектор движения на основе ввода пользователя.
        movement = (forward * Input.GetAxis("Vertical") + right * Input.GetAxis("Horizontal")).normalized;

        // Определяем, бежит ли персонаж.
        isRunning = Input.GetKey(KeyCode.LeftShift);

        // Определяем, сидит ли персонаж.
        if (Input.GetKeyDown(KeyCode.C)) { isSiting = !isSiting; } // Переключаем состояние сидения при нажатии на клавишу C
    }

    // Обновление движения
    private void UpdateMovement()
    {
        // Плавно изменяем скорость и скорость вращения
        float targetSpeed = walkSpeed; // Начальная скорость - скорость ходьбы
        float targetRotationSpeed = walkRotationSpeed; // Начальная скорость вращения - скорость ходьбы

        targetHeight = animationHeights["not Sit"];
        colliderOffset = new Vector3(0f, currentHeight / 2f);

        if (isRunning && !isSiting)
        {
            targetSpeed = runSpeed; // Устанавливаем целевую скорость как скорость бега
            targetRotationSpeed = runRotationSpeed; // Устанавливаем целевую скорость вращения как скорость вращения при беге
        }
        else if (!isRunning && isSiting)
        {
            targetSpeed = sitSpeed; // Устанавливаем целевую скорость как скорость сидения
            targetRotationSpeed = sitRotationSpeed; // Устанавливаем целевую скорость вращения как скорость вращения при сидении
            anim.SetFloat("SitSpeed", 0.5f);

            targetHeight = animationHeights["Sit"];
            colliderOffset = new Vector3(0f, currentHeight / 2f, 0.2f);
        }
        else if (isRunning && isSiting)
        {
            targetSpeed = sitNrunSpeed; // Устанавливаем целевую скорость как скорость сидения
            targetRotationSpeed = sitNrunRotationSpeed; // Устанавливаем целевую скорость вращения как скорость вращения при сидении
            anim.SetFloat("SitSpeed", 0.75f);

            targetHeight = animationHeights["Sit"];
            colliderOffset = new Vector3(0f, currentHeight / 2f, 0.2f);
        }

        // Используем Lerp для плавного изменения скорости и скорости вращения
        currentSpeed = Mathf.Lerp(currentSpeed, targetSpeed, Time.deltaTime * speedChangeRate); // Плавное изменение текущей скорости к целевой скорости
        currentRotationSpeed = Mathf.Lerp(currentRotationSpeed, targetRotationSpeed, Time.deltaTime * speedChangeRate); // Плавное изменение текущей скорости вращения к целевой скорости вращения
    }

    // Обновление поворота
    private void UpdateRotation()
    {
        if (movement != Vector3.zero) // Если персонаж движется
        {
            // Поворачиваем персонажа в направлении движения.
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(movement), Time.deltaTime * currentRotationSpeed); // Вращаем персонажа с текущей скоростью вращения
        }
    }

    // Обновление анимации
    private void UpdateAnimation()
    {
        if (movement != Vector3.zero) // Если персонаж движется
        {
            // Перемещаем персонажа в направлении движения.
            transform.position = Vector3.MoveTowards(transform.position, transform.position + movement, currentSpeed * Time.deltaTime); // Перемещаем персонажа с текущей скоростью

            // Анимируем персонажа.
            anim.SetBool("isWalking", true); // Анимируем ходьбу
            anim.SetBool("isRunning", isRunning); // Анимируем бег
        }
        else // Если персонаж не движется
        {
            // Если персонаж не двигается, то устанавливаем анимацию в состояние покоя.
            anim.SetBool("isWalking", false); // Останавливаем анимацию ходьбы
            anim.SetBool("isRunning", false); // Останавливаем анимацию бега
        }
        anim.SetBool("isSiting", isSiting); // Анимируем сидение
    }

    // Обновление высоты коллайдера
    private void UpdateColliderHeight()
    {
        // Плавно изменяем высоту коллайдера
        currentHeight = Mathf.SmoothDamp(currentHeight, targetHeight, ref velocity, smoothTime);
        capsuleCollider.height = currentHeight;
        capsuleCollider.center = new Vector3(colliderOffset.x, currentHeight / 2f, colliderOffset.z);
    }
}
